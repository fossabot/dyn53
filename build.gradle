/*
 * Copyright 2015 Philip Cronje
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
group 'net.za.slyfox.dyn53'
version '1.0.0'

apply plugin: 'java'

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
	compile group: 'com.amazonaws', name: 'aws-java-sdk-route53', version: '1.9.40'
	compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.0'
	compile group: 'net.java.dev.jna', name: 'jna', version: '4.1.0'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'

	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
}

configurations.all({
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if(details.requested.group == 'commons-logging') {
			details.useTarget group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.12'
		}

		if(details.requested.group == 'commons-codec') details.useVersion '1.10'
		else if(details.requested.group == 'com.fasterxml.jackson.core') details.useVersion '2.5.3'
		else if(details.requested.group == 'com.google.guava') details.useVersion '18.0'
		else if(details.requested.group == 'org.apache.httpcomponents') details.useVersion '4.4.1'
	}
})

jar {
	manifest {
		attributes 'Main-Class': 'net.za.slyfox.dyn53.Dyn53',
				'Class-Path': configurations.runtime.collect{"lib/$it.name"}.join(' ')
	}
}

task dist(type: Copy) {
	dependsOn jar
	from jar
	into "$buildDir/dist"
	into('lib') {
		from configurations.runtime
	}
}

task distZip(type: Zip) {
	dependsOn dist
	entryCompression ZipEntryCompression.STORED
	from "$buildDir/dist"
}
